name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Win32-Release",
            os: windows-latest,
            cmake_opts: "-A Win32 \
              -DALSOFT_TESTS=ON \
              -DALSOFT_BUILD_ROUTER=ON \
              -DALSOFT_REQUIRE_WINMM=ON \
              -DALSOFT_REQUIRE_DSOUND=ON \
              -DALSOFT_REQUIRE_WASAPI=ON",
            build_type: "Release"
          }
        - {
            name: "Win32-Debug",
            os: windows-latest,
            cmake_opts: "-A Win32 \
              -DALSOFT_TESTS=ON \
              -DALSOFT_BUILD_ROUTER=ON \
              -DALSOFT_REQUIRE_WINMM=ON \
              -DALSOFT_REQUIRE_DSOUND=ON \
              -DALSOFT_REQUIRE_WASAPI=ON",
            build_type: "Debug"
          }
        - {
            name: "Win64-Release",
            os: windows-latest,
            cmake_opts: "-A x64 \
              -DALSOFT_TESTS=ON \
              -DALSOFT_BUILD_ROUTER=ON \
              -DALSOFT_REQUIRE_WINMM=ON \
              -DALSOFT_REQUIRE_DSOUND=ON \
              -DALSOFT_REQUIRE_WASAPI=ON",
            build_type: "Release"
          }
        - {
            name: "Win64-Debug",
            os: windows-latest,
            cmake_opts: "-A x64 \
              -DALSOFT_TESTS=ON \
              -DALSOFT_BUILD_ROUTER=ON \
              -DALSOFT_REQUIRE_WINMM=ON \
              -DALSOFT_REQUIRE_DSOUND=ON \
              -DALSOFT_REQUIRE_WASAPI=ON",
            build_type: "Debug"
          }
        - {
            name: "Win64-UWP",
            os: windows-latest,
            cmake_opts: "-A x64 \
              -DALSOFT_TESTS=OFF \
              -DCMAKE_SYSTEM_NAME=WindowsStore \
              \"-DCMAKE_SYSTEM_VERSION=10.0\" \
              -DALSOFT_BUILD_ROUTER=ON \
              -DALSOFT_REQUIRE_WASAPI=ON",
            build_type: "Release"
          }
        - {
            name: "macOS-Release",
            os: macos-latest,
            cmake_opts: "-DALSOFT_REQUIRE_COREAUDIO=ON \
              -DALSOFT_TESTS=ON",
            build_type: "Release"
          }
        - {
            name: "iOS-Release",
            os: macos-latest,
            cmake_opts: "-GXcode \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DALSOFT_REQUIRE_COREAUDIO=ON \
            -DALSOFT_UTILS=OFF \
            -DALSOFT_EXAMPLES=OFF \
            -DALSOFT_TESTS=OFF \
            -DALSOFT_INSTALL=OFF \
            \"-DCMAKE_OSX_ARCHITECTURES=arm64\"",
            build_type: "Release"
          }
        - {
            name: "Linux-Release",
            os: ubuntu-latest,
            cmake_opts: "-DALSOFT_REQUIRE_RTKIT=ON \
              -DALSOFT_REQUIRE_ALSA=ON \
              -DALSOFT_REQUIRE_OSS=ON \
              -DALSOFT_REQUIRE_PORTAUDIO=ON \
              -DALSOFT_REQUIRE_PULSEAUDIO=ON \
              -DALSOFT_REQUIRE_JACK=ON \
              -DALSOFT_REQUIRE_PIPEWIRE=ON \
              -DALSOFT_TESTS=ON",
            deps_cmdline: "sudo apt update && sudo apt-get install -qq \
              libpulse-dev \
              portaudio19-dev \
              libasound2-dev \
              libjack-dev \
              libpipewire-0.3-dev \
              qtbase5-dev \
              libdbus-1-dev",
            build_type: "Release"
          }

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{matrix.config.deps_cmdline}}" ]]; then
          eval ${{matrix.config.deps_cmdline}}
        fi

    - name: Configure
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} ${{matrix.config.cmake_opts}} .

    - name: Build
      shell: bash
      run: |
        cmake --build build --config ${{matrix.config.build_type}}

    - name: Test
      shell: bash
      run: |
        cd build
        ctest

    - name: Create Archive
      if: ${{ matrix.config.os == 'windows-latest' }}
      shell: bash
      run: |
        cd build
        mkdir archive
        mkdir archive/router
        cp ${{matrix.config.build_type}}/soft_oal.dll archive
        cp ${{matrix.config.build_type}}/OpenAL32.dll archive/router

    - name: Upload Archive
      # Upload package as an artifact of this workflow.
      uses: actions/upload-artifact@v3.1.2
      if: ${{ matrix.config.os == 'windows-latest' }}
      with:
        name: soft_oal-${{matrix.config.name}}
        path: build/archive
